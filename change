/*
Copyright 2022, Gianluca A. (g-luka - cesenate)
based on the work of Ludwig V. <https://github.com/ludwig-v>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License at <http://www.gnu.org/licenses/> for
more details.
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
*/

/////////////////////
//    Libraries    //
/////////////////////

#include <EEPROM.h>
#include <SPI.h>
#include <Time.h>
#include <TimeLib.h>
#include <DS1307RTC.h> // https://github.com/PaulStoffregen/DS1307RTC
#include <mcp2515.h> // https://github.com/autowp/arduino-mcp2515 + https://github.com/watterott/Arduino-Libs/tree/master/digitalWriteFast

/////////////////////
//  Configuration  //
/////////////////////

#define CS_PIN_CAN0 10
#define CS_PIN_CAN1 9
#define SERIAL_SPEED 115200
#define CAN_SPEED CAN_125KBPS // Entertainment CAN bus - Low speed
#define CAN_FREQ MCP_16MHZ // Switch to 8MHZ if you have a 8Mhz module

////////////////////
// Initialization //
////////////////////

MCP2515 CAN0(CS_PIN_CAN0); // CAN-BUS Shield N째1
MCP2515 CAN1(CS_PIN_CAN1); // CAN-BUS Shield N째2

////////////////////
//   Variables    //
////////////////////

// My variables
const int button1 = 3;
bool button1Pressed = false;

byte bit3 = 0b00000000;
bool debugGeneral = true; // Get some debug informations on Serial
bool debugCAN0 = false; // Read data sent by ECUs from the car to Entertainment CAN bus using https://github.com/alexandreblin/python-can-monitor
bool debugCAN1 = false; // Read data sent by the NAC / SMEG to Entertainment CAN bus using https://github.com/alexandreblin/python-can-monitor
bool EconomyModeEnabled = true; // You can disable economy mode on the Telematic if you want to - Not recommended at all
bool TemperatureInF = false; // Default Temperature in Celcius
bool mpgMi = false;
bool kmL = true; // km/L statistics instead of L/100
byte languageID = 9; // Default is FR: 0 - EN: 1 / DE: 2 / ES: 3 / IT: 4 / PT: 5 / NL: 6 / BR: 9 / TR: 12 / RU: 14
bool listenCAN2004Language = true; // Switch language on CAN2010 devices if changed on supported CAN2004 devices, default: yes
byte Time_day = 24; // Default day if the RTC module is not configured
byte Time_month = 5; // Default month if the RTC module is not configured
int Time_year = 2021; // Default year if the RTC module is not configured
byte Time_hour = 10; // Default hour if the RTC module is not configured
byte Time_minute = 30; // Default minute if the RTC module is not configured
bool resetEEPROM = false; // Switch to true to reset all EEPROM values

// Default variables
bool Ignition = false;
bool SerialEnabled = false;
int Temperature = 0;
bool EconomyMode = false;
bool EngineRunning = false;
byte languageID_CAN2004 = 4;
bool MaintenanceDisplayed = true;
int vehicleSpeed = 0;

// Language & Unit CAN2010 value
byte languageAndUnitNum = (languageID * 4) + 128;

// CAN-BUS Messages
struct can_frame canMsgSnd;
struct can_frame canMsgRcv;

bool reverse = false;
bool variab0e6 = false;

bool pdcoff = false;
bool espoff = false;
bool check = false;
bool dsgreset = false;
int modes = 0;

bool faritemp15 = false;
bool faritemp30 = false;
bool faritemp60 = false;
bool faridirez = false;
bool tergipost = false;
bool farigiorn = false;

long previousMillis;

void setup() {
  pinMode(button1, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(button1), myISR, FALLING); // trigger when button pressed, but not when released.
  int tmpVal;

  if (resetEEPROM) {
    EEPROM.update(0, 0);
    EEPROM.update(1, 0);
    EEPROM.update(2, 0);
    EEPROM.update(3, 0);
    EEPROM.update(4, 0);
    EEPROM.update(5, 0);
    EEPROM.update(6, 0);
    EEPROM.update(7, 0);
  }

  if (debugCAN0 || debugCAN1 || debugGeneral) {
    SerialEnabled = true;
  }

  // Read data from EEPROM
  tmpVal = EEPROM.read(0);
  if (tmpVal >= 128) {
    languageAndUnitNum = tmpVal;
  }

  if ((languageAndUnitNum % 2) == 0 && kmL) {
    languageAndUnitNum = languageAndUnitNum + 1;
  }

  tmpVal = EEPROM.read(1);
  if (tmpVal <= 32) {
    languageID_CAN2004 = tmpVal;
  }

  tmpVal = EEPROM.read(2);
  if (tmpVal <= 32) {
    languageID = tmpVal;
  }

  tmpVal = EEPROM.read(3);
  if (tmpVal == 1) {
    TemperatureInF = true;
  }

  tmpVal = EEPROM.read(4);
  if (tmpVal == 1) {
    mpgMi = true;
  }

  tmpVal = EEPROM.read(5);
  if (tmpVal <= 31) {
    Time_day = tmpVal;
  }

  tmpVal = EEPROM.read(6);
  if (tmpVal <= 12) {
    Time_month = tmpVal;
  }

  EEPROM.get(7, tmpVal); // int
  if (tmpVal >= 1872 && tmpVal <= 2127) {
    Time_year = tmpVal;
  }

  if (SerialEnabled) {
    // Initalize Serial for debug
    Serial.begin(SERIAL_SPEED);

    // CAN-BUS from car
    Serial.println("Initialization CAN0");
  }

  CAN0.reset();
  CAN0.setBitrate(CAN_SPEED, CAN_FREQ);
  while (CAN0.setNormalMode() != MCP2515::ERROR_OK) {
    delay(100);
  }

  if (SerialEnabled) {
    // CAN-BUS to CAN2010 device(s)
    Serial.println("Initialization CAN1");
  }

  CAN1.reset();
  CAN1.setBitrate(CAN_SPEED, CAN_FREQ);
  while (CAN1.setNormalMode() != MCP2515::ERROR_OK) {
    delay(100);
  }

  setSyncProvider(RTC.get); // Get time from the RTC module
  if (timeStatus() != timeSet) {
    if (SerialEnabled) {
      Serial.println("Unable to sync with the RTC");
    }

    // Set default time 
    setTime(Time_hour, Time_minute, 0, Time_day, Time_month, Time_year);
    EEPROM.update(5, Time_day);
    EEPROM.update(6, Time_month);
    EEPROM.put(7, Time_year);
  } else if (SerialEnabled) {
    Serial.println("RTC has set the system time");
  }

  // Set hour on CAN-BUS Clock
  canMsgSnd.data[0] = hour();
  canMsgSnd.data[1] = minute();
  canMsgSnd.can_id = 0x228;
  canMsgSnd.can_dlc = 2;
  CAN0.sendMessage( & canMsgSnd);

  if (SerialEnabled) {
    Serial.print("Current Time: ");
    Serial.print(day());
    Serial.print("/");
    Serial.print(month());
    Serial.print("/");
    Serial.print(year());

    Serial.print(" ");

    Serial.print(hour());
    Serial.print(":");
    Serial.print(minute());

    Serial.println();
  }
}

void loop() {
  
    int tmpVal; 

  // Receive CAN messages from the car
  if (CAN0.readMessage( & canMsgRcv) == MCP2515::ERROR_OK) {
    int id = canMsgRcv.can_id;
    int len = canMsgRcv.can_dlc;

    if (button1Pressed == true) {
      button1Pressed = false;
      bit3 += 1;
    }    

    if (debugCAN0) {
      Serial.print("FRAME:ID=");
      Serial.print(id);
      Serial.print(":LEN=");
      Serial.print(len);

      char tmp[3];
      for (int i = 0; i < len; i++) {
        Serial.print(":");

        snprintf(tmp, 3, "%02X", canMsgRcv.data[i]);

        Serial.print(tmp);
      }

      Serial.println();

      CAN1.sendMessage( & canMsgRcv);
    } else if (!debugCAN1) {

    if (id == 0x21F) {
      canMsgSnd.data[0] = 0x0;
      canMsgSnd.data[1] = 0x0;
      canMsgSnd.data[2] = 0x0;
      canMsgSnd.data[3] = bit3;
      canMsgSnd.data[4] = 0x00;
      canMsgSnd.data[5] = 0x0;

      canMsgSnd.can_id = 0xA2;
      canMsgSnd.can_dlc = 6;
      CAN1.sendMessage( & canMsgSnd);
    }

      if (id == 54 && len == 8) { // Economy Mode detection
        tmpVal = canMsgRcv.data[2];
        if (tmpVal >= 128) {
          if (!EconomyMode && SerialEnabled) {
            Serial.println("Economy mode ON");
          }

          EconomyMode = true;
        } else {
          if (EconomyMode && SerialEnabled) {
            Serial.println("Economy mode OFF");
          }

          EconomyMode = false;
        }

        tmpVal = canMsgRcv.data[3];

        CAN1.sendMessage( & canMsgRcv);
      } else if (id == 182 && len == 8) {
        if (canMsgRcv.data[0] > 0x00 || canMsgRcv.data[1] > 0x00) { // Engine RPM, 0x00 0x00 when the engine is OFF
          EngineRunning = true;
        } else {
          EngineRunning = false;
        }
        vehicleSpeed = ((canMsgRcv.data[2] << 8) | canMsgRcv.data[3]) / 100;
        CAN1.sendMessage( & canMsgRcv);
      }

   
       
       else if (id == 246 && len == 8) {
        tmpVal = canMsgRcv.data[0];
        if (tmpVal > 128) {
          if (!Ignition && SerialEnabled) {
            Serial.println("Ignition ON");
          }

          Ignition = true;
        } else {
          if (Ignition && SerialEnabled) {
            Serial.println("Ignition OFF");
          }

          Ignition = false;
        }

// ------------------------------------------        

        tmpVal = canMsgRcv.data[7];   // Indicazione retromarcia on
        if (bitRead(tmpVal, 7) == 1)
        {reverse = true;
        previousMillis = millis();}
        else {
        if ((millis()- previousMillis) >= 5000){  // Indicazione retromarcia off dopo 5 secondi
        reverse = false;}
        }
      
// -----------------------------------------        

        tmpVal = ceil(canMsgRcv.data[5] / 2.0) - 40; // Temperatures can be negative but we only have 0 > 255, the new range is starting from -40째C
        if (Temperature != tmpVal) {
          Temperature = tmpVal;

          if (SerialEnabled) {
            Serial.print("Ext. Temperature: ");
            Serial.print(tmpVal);
            Serial.println("째C");
          }
        }

        CAN1.sendMessage( & canMsgRcv);
      }

// -------------------------------------------------------------------------------
 
        else if (id == 360 && len == 8) { // Spie strumentazione
        canMsgSnd.data[0] = canMsgRcv.data[0]; 
        canMsgSnd.data[1] = canMsgRcv.data[1]; 
        canMsgSnd.data[2] = canMsgRcv.data[2]; 
        canMsgSnd.data[3] = canMsgRcv.data[3]; 
        canMsgSnd.data[4] = canMsgRcv.data[4]; 
        canMsgSnd.data[5] = canMsgRcv.data[5]; 
        canMsgSnd.data[6] = canMsgRcv.data[6];
        canMsgSnd.data[7] = canMsgRcv.data[7];

        if (bitRead(canMsgRcv.data[3], 7) == 1) // Spia avaria freni
        {bitSet(canMsgSnd.data[0], 2);
         bitClear(canMsgSnd.data[3], 7);}
        else
        {bitClear(canMsgSnd.data[0], 2);}

        if (bitRead(canMsgRcv.data[4], 4) == 1) // Spia avaria motore lampeggiante
        {bitSet(canMsgSnd.data[1], 5);}
        else
        {bitClear(canMsgSnd.data[1], 5);}

        bitSet(canMsgSnd.data[5], 2); // Spengono spia STOP se inattiva
        bitSet(canMsgSnd.data[5], 5);
              
        canMsgSnd.can_id = 0x168;
        canMsgSnd.can_dlc = 8;

        CAN1.sendMessage( & canMsgSnd);
        
}
        else if (id == 296 && len == 8) { // Spie strumentazione

        canMsgSnd.data[0] = canMsgRcv.data[4]; // Spie luci esterne
        
        canMsgSnd.data[1] = 0x00;
        canMsgSnd.data[2] = 0x01;
        canMsgSnd.data[3] = 0x00;
        canMsgSnd.data[4] = 0x00;
        canMsgSnd.data[5] = 0x00;
        canMsgSnd.data[6] = 0x04;
        canMsgSnd.data[7] = 0x00;

        if (bitRead(canMsgRcv.data[0], 1) == 1) // Spia cintura passeggero
        {bitSet(canMsgSnd.data[5], 4);}
        else
        {bitClear(canMsgSnd.data[5], 4);}

        if (bitRead(canMsgRcv.data[0], 4) == 1) // Spia riserva
        {bitSet(canMsgSnd.data[5], 7);}
        else
        {bitClear(canMsgSnd.data[5], 7);}

        if (bitRead(canMsgRcv.data[0], 5) == 1) // Spia freno a mano
        {bitSet(canMsgSnd.data[3], 1);}
        else
        {bitClear(canMsgSnd.data[3], 1);}

        if (bitRead(canMsgRcv.data[0], 6) == 1) // Spia cintura conducente
        {bitSet(canMsgSnd.data[5], 0);}
        else
        {bitClear(canMsgSnd.data[5], 0);}

        if (bitRead(canMsgRcv.data[2], 3) == 1) // Spia ESP lampeggiante
        {bitSet(canMsgSnd.data[4], 1);}
        else
        {bitClear(canMsgSnd.data[4], 1);}

        if (bitRead(canMsgRcv.data[2], 4) == 1) // Spia ESP fissa (pulsante)
        {bitSet(canMsgSnd.data[4], 2);}
        else
        {bitClear(canMsgSnd.data[4], 2);}

        if (bitRead(canMsgRcv.data[1], 6) == 1) // Spia STOP
        {bitSet(canMsgSnd.data[3], 6);}
        else
        {bitClear(canMsgSnd.data[3], 6);}

        if (bitRead(canMsgRcv.data[1], 7) == 1) // Spia SERVICE
        {bitSet(canMsgSnd.data[3], 7);}
        else
        {bitClear(canMsgSnd.data[3], 7);}

        if ((bitRead(canMsgRcv.data[1], 3) == 1)||(bitRead(canMsgRcv.data[1], 4) == 1))  // Spia PORTE APERTE
        {bitSet(canMsgSnd.data[4], 6);}
        else
        {bitClear(canMsgSnd.data[4], 6);}

        canMsgSnd.can_id = 0x128;
        canMsgSnd.can_dlc = 8;

        CAN1.sendMessage( & canMsgSnd);
        
      } 
//------------------------------------------------------------------------------------------------

        else if (id == 290 && len == 8){  // Comandi provenienti da F-MUX su CAN2004

        canMsgSnd.data[0] = 0x00;
        canMsgSnd.data[1] = 0x00;
        canMsgSnd.data[2] = 0x00;
        canMsgSnd.data[3] = 0x00;
        canMsgSnd.data[4] = 0x00;
        canMsgSnd.data[5] = 0x00;
        canMsgSnd.data[6] = 0x00;
        canMsgSnd.data[7] = 0x00;
        
        if (bitRead(canMsgRcv.data[0], 6) == 1) // Comando SRC --> Lancio Check
        {check = true;}  

        modes = canMsgRcv.data[6]; // Ricezione comando scorrimento schermate Cirocco 
      
        canMsgSnd.can_id = 0x122;
        canMsgSnd.can_dlc = 8;
        CAN1.sendMessage( & canMsgSnd);      
            
      }

// -----------------------------------------------------------------------------------------------
      
      else if (id == 230 && len == 6) { // movimento ruote, voltaggio, spegnimento spie

    if (reverse) {
          
        canMsgSnd.data[0] = canMsgRcv.data[0];
        canMsgSnd.data[1] = canMsgRcv.data[1];
        canMsgSnd.data[2] = canMsgRcv.data[2];
        canMsgSnd.data[3] = canMsgRcv.data[3];
        canMsgSnd.data[4] = canMsgRcv.data[4];
        canMsgSnd.data[5] = canMsgRcv.data[5];
        canMsgSnd.data[6] = 0;
        canMsgSnd.data[7] = 0;
                  
        canMsgSnd.can_id = 0x0E6;
        canMsgSnd.can_dlc = 8;
        CAN1.sendMessage( & canMsgSnd);
        }  
    else
        {
        canMsgSnd.data[0] = 0x00;
        canMsgSnd.data[1] = 0x00;
        canMsgSnd.data[2] = 0x01;
        canMsgSnd.data[3] = 0x00;
        canMsgSnd.data[4] = 0x01;
        canMsgSnd.data[5] = 0x81;
        canMsgSnd.data[6] = 0x80;

        if (variab0e6 == false){        
        canMsgSnd.data[7] = 0x30;          
        variab0e6 = true;           
        }
        else{
        canMsgSnd.data[7] = 0x45;          
        variab0e6 = false; }             
               
        canMsgSnd.can_id = 0x0E6;
        canMsgSnd.can_dlc = 8;
        CAN1.sendMessage( & canMsgSnd);          
        }
    }
    
// -------------------------------------------------------------------------------------

           else if (id == 865 && len == 6) { // DSG Check / Impostazioni
         
           canMsgSnd.data[0] = 0xB1; // Attiva Fari diurni + Fari direzionali
           canMsgSnd.data[1] = 0x60; // Attiva Fari temporizzati + Tergi post automatico
           canMsgSnd.data[2] = 0x68;
           canMsgSnd.data[3] = 0x11; // Visualizza info DSG su MATT2010/Cirocco
           canMsgSnd.data[4] = 0x00;

           canMsgSnd.can_id = 0x361;
           canMsgSnd.can_dlc = 5;
           CAN1.sendMessage( & canMsgSnd);  
          
          }
          
// -------------------------------------------------------------------------------------

        else if (id == 935 && len == 8) { // Maintenance
        canMsgSnd.data[0] = 0x40;
        canMsgSnd.data[1] = canMsgRcv.data[5]; // Value x255 +
        canMsgSnd.data[2] = canMsgRcv.data[6]; // Value x1 = Number of days till maintenance (FF FF if disabled)
        canMsgSnd.data[3] = canMsgRcv.data[3]; // Value x5120 +
        canMsgSnd.data[4] = canMsgRcv.data[4]; // Value x20 = km left till maintenance
        canMsgSnd.can_id = 0x3E7; // New maintenance frame ID
        canMsgSnd.can_dlc = 5;

        if (SerialEnabled && !MaintenanceDisplayed) {
          Serial.print("Next maintenance in: ");
          if (canMsgRcv.data[3] != 0xFF && canMsgRcv.data[4] != 0xFF) {
            tmpVal = (canMsgRcv.data[3] * 5120) + (canMsgRcv.data[4] * 20);
            Serial.print(tmpVal);
            Serial.println(" km");
          }
          if (canMsgRcv.data[5] != 0xFF && canMsgRcv.data[6] != 0xFF) {
            tmpVal = (canMsgRcv.data[5] * 255) + canMsgRcv.data[6];
            Serial.print(tmpVal);
            Serial.println(" days");
          }
          MaintenanceDisplayed = true;
        }

        CAN1.sendMessage( & canMsgSnd);
        
      } else if (id == 424 && len == 8) { // Cruise control
        CAN1.sendMessage( & canMsgRcv);

        canMsgSnd.data[0] = canMsgRcv.data[1];
        canMsgSnd.data[1] = canMsgRcv.data[2];
        canMsgSnd.data[2] = canMsgRcv.data[0];
        canMsgSnd.data[3] = 0x80;
        canMsgSnd.data[4] = 0x14;
        canMsgSnd.data[5] = 0x7F;
        canMsgSnd.data[6] = 0xFF;
        canMsgSnd.data[7] = 0x98;
        canMsgSnd.can_id = 0x228; // New cruise control frame ID
        canMsgSnd.can_dlc = 8;
        CAN1.sendMessage( & canMsgSnd);
             
      } else if (id == 727 && len == 5 && listenCAN2004Language) { // CAN2004 Matrix
        tmpVal = canMsgRcv.data[0];
        if (tmpVal > 32) {
          kmL = true;
          tmpVal = tmpVal - 32;
        }

        if (tmpVal <= 32 && languageID_CAN2004 != tmpVal) {
          languageID_CAN2004 = tmpVal;
          EEPROM.update(1, languageID_CAN2004);

          // Change language and unit on ID 608 for CAN2010 Telematic language change
          languageAndUnitNum = (languageID_CAN2004 * 4) + 128;
          if (kmL) {
            languageAndUnitNum = languageAndUnitNum + 1;
          }
          EEPROM.update(0, languageAndUnitNum);

          if (SerialEnabled) {
            Serial.print("CAN2004 Matrix - Change Language: ");
            Serial.print(tmpVal);
            Serial.println();
          }
        } else {
          Serial.print("CAN2004 Matrix - Unsupported language ID: ");
          Serial.print(tmpVal);
          Serial.println();
        }
       }
 // ---------------------------------------------------------------
 
        else if (id == 608 && len == 8) { // 0x260
        // Do not forward original message, it has been completely redesigned on CAN2010
        // Also forge missing messages from CAN2004

        // Language / Units / Settings
        canMsgSnd.data[0] = languageAndUnitNum;
        canMsgSnd.data[1] = 0x1C;
 
        if (mpgMi) {
          canMsgSnd.data[1] = canMsgSnd.data[1] + 128;
        }

        // Vehicle Menu settings on NAC/RCC: Investigation to do
        // **************************
        canMsgSnd.data[2] = 0x00;
        canMsgSnd.data[3] = 0x00;
        canMsgSnd.data[4] = 0x00;
        canMsgSnd.data[5] = 0x00;
        canMsgSnd.data[6] = 0x00;
        // **************************

        canMsgSnd.can_id = 0x260;
        canMsgSnd.can_dlc = 7;
        CAN1.sendMessage( & canMsgSnd);
       
        // **************************

        // Economy mode simulation
        if (EconomyMode && EconomyModeEnabled) {
          canMsgSnd.data[0] = 0x14;
          if (Ignition) {
            canMsgSnd.data[5] = 0x0E;
          } else {
            canMsgSnd.data[5] = 0x0C;
          }
        } else {
          if (EngineRunning) {
            canMsgSnd.data[0] = 0x54;
          } else {
            canMsgSnd.data[0] = 0x04;
          }
          canMsgSnd.data[5] = 0x0F;
        }
        canMsgSnd.data[1] = 0x03;
        canMsgSnd.data[2] = 0xDE;

        canMsgSnd.data[3] = 0x00; // Increasing value,
        canMsgSnd.data[4] = 0x00; // counter ?

        canMsgSnd.data[6] = 0xFE;
        canMsgSnd.data[7] = 0x00;
        canMsgSnd.can_id = 0x236;
        canMsgSnd.can_dlc = 8;
        CAN1.sendMessage( & canMsgSnd);
        

        // Current Time
        // If time is synced
        if (timeStatus() != timeNotSet) {
          canMsgSnd.data[0] = (year() - 1872); // Year would not fit inside one byte (0 > 255), substract 1872 and you get this new range (1872 > 2127)
          canMsgSnd.data[1] = month();
          canMsgSnd.data[2] = day();
          canMsgSnd.data[3] = hour();
          canMsgSnd.data[4] = minute();
          canMsgSnd.data[5] = 0x3F;
          canMsgSnd.data[6] = 0xFE;
        } else {
          canMsgSnd.data[0] = (Time_year - 1872); // Year would not fit inside one byte (0 > 255), substract 1872 and you get this new range (1872 > 2127)
          canMsgSnd.data[1] = Time_month;
          canMsgSnd.data[2] = Time_day;
          canMsgSnd.data[3] = Time_hour;
          canMsgSnd.data[4] = Time_minute;
          canMsgSnd.data[5] = 0x3F;
          canMsgSnd.data[6] = 0xFE;
        }
        canMsgSnd.can_id = 0x276;
        canMsgSnd.can_dlc = 7;
        CAN1.sendMessage( & canMsgSnd);
        
      } else {
        CAN1.sendMessage( & canMsgRcv);
      }
    } else {
      CAN1.sendMessage( & canMsgRcv);
    }   
  }

  // ------------------------ Forward messages from the CAN2010 device(s) to the car --------------------
  
  if (CAN1.readMessage( & canMsgRcv) == MCP2515::ERROR_OK) {
    int id = canMsgRcv.can_id;
    int len = canMsgRcv.can_dlc;

    if (debugCAN1) {
      Serial.print("FRAME:ID=");
      Serial.print(id);
      Serial.print(":LEN=");
      Serial.print(len);

      char tmp[3];
      for (int i = 0; i < len; i++) {
        Serial.print(":");

        snprintf(tmp, 3, "%02X", canMsgRcv.data[i]);

        Serial.print(tmp);
      }

      Serial.println();

      CAN0.sendMessage( & canMsgRcv);
    } else if (!debugCAN0) {
      if (id == 923 && len == 5) {
        Time_year = canMsgRcv.data[0] + 1872; // Year would not fit inside one byte (0 > 255), add 1872 and you get this new range (1872 > 2127)
        Time_month = canMsgRcv.data[1];
        Time_day = canMsgRcv.data[2];
        Time_hour = canMsgRcv.data[3];
        Time_minute = canMsgRcv.data[4];

        setTime(Time_hour, Time_minute, 0, Time_day, Time_month, Time_year);
        RTC.set(now()); // Set the time on the RTC module too
        EEPROM.update(5, Time_day);
        EEPROM.update(6, Time_month);
        EEPROM.put(7, Time_year);

        // Set hour on CAN-BUS Clock
        canMsgSnd.data[0] = hour();
        canMsgSnd.data[1] = minute();
        canMsgSnd.can_id = 0x228;
        canMsgSnd.can_dlc = 1;
        CAN0.sendMessage( & canMsgSnd);

        if (SerialEnabled) {
          Serial.print("Change Hour/Date: ");
          Serial.print(day());
          Serial.print("/");
          Serial.print(month());
          Serial.print("/");
          Serial.print(year());

          Serial.print(" ");

          Serial.print(hour());
          Serial.print(":");
          Serial.print(minute());

          Serial.println();
        }
      } else if (id == 347 && len == 8) {
        tmpVal = canMsgRcv.data[0];
        if (tmpVal >= 128) {
          languageAndUnitNum = tmpVal;
          EEPROM.update(0, languageAndUnitNum);

          if (SerialEnabled) {
            Serial.print("Telematic - Change Language and Unit (Number): ");
            Serial.print(tmpVal);
            Serial.println();
          }

          tmpVal = canMsgRcv.data[1];
          if (tmpVal >= 128) {
            mpgMi = true;
            EEPROM.update(4, 1);

            tmpVal = tmpVal - 128;
          } else {
            mpgMi = false;
            EEPROM.update(4, 0);
          }

          if (tmpVal >= 64) {
            TemperatureInF = true;
            EEPROM.update(3, 1);

            if (SerialEnabled) {
              Serial.print("Telematic - Change Temperature Type: Fahrenheit");
              Serial.println();
            }
          } else if (tmpVal >= 0) {
            TemperatureInF = false;
            EEPROM.update(3, 0);

            if (SerialEnabled) {
              Serial.print("Telematic - Change Temperature Type: Celcius");
              Serial.println();
            }
          }
        } else {
          tmpVal = ceil(tmpVal / 4.0);
          if (canMsgRcv.data[1] >= 128) {
            tmpVal--;
          }
          languageID = tmpVal;

          // CAN2004 Head-up panel is only one-way talking, we can't change the language on it from the CAN2010 Telematic :-(

          if (SerialEnabled) {
            Serial.print("Telematic - Change Language (ID): ");
            Serial.print(tmpVal);
            Serial.println();
          }
        }
      }
       
//--------------------------------------------------------------------------------
       
        else if (id == 425 && len == 8) {
        if (bitRead(canMsgRcv.data[3], 2) == 1) // Pulsante virtuale pdc
        {pdcoff = true;}

        if (bitRead(canMsgRcv.data[5], 0) == 1) // Pulsante virtuale reset dsg
        {dsgreset = true;}                      
        }

        else if (id == 809 && len == 6) { // Pulsante virtuale ESP
        if (bitRead(canMsgRcv.data[3], 0) == 1)
        {espoff = true;}
        }
          
// ------------------------------------ Pulsanti quadro Cirocco e virtuali NAC > C4   


        else if (id == 535 && len == 8) { 
        canMsgSnd.data[0] = canMsgRcv.data[0];
        canMsgSnd.data[1] = canMsgRcv.data[1];
        canMsgSnd.data[2] = canMsgRcv.data[2];
        canMsgSnd.data[3] = canMsgRcv.data[3];        
        canMsgSnd.data[4] = canMsgRcv.data[4];
        canMsgSnd.data[5] = canMsgRcv.data[5];
        canMsgSnd.data[6] = 0xFF;                   // Consente i messaggi informativi del computer di bordo
        canMsgSnd.data[7] = 0xE0;                   //     "         "          "             "          "
        
        if (check) 
        {canMsgSnd.data[1] = 0x20;
        check = false;
        }
        else        
        check = false;

        if (pdcoff) 
        {bitSet(canMsgSnd.data[2], 7);
        pdcoff = false;
        }
        else
        {bitClear(canMsgSnd.data[2], 7);}
                
        if (espoff) 
        {bitSet(canMsgSnd.data[2], 6);
        espoff = false;
        }
        else
        {bitClear(canMsgSnd.data[2], 6);}

        if (bitRead(canMsgRcv.data[4], 0) == 1) // Pulsante fisico pdc
        {pdcoff = true;}

        if (bitRead(canMsgRcv.data[2], 6) == 1) // Pulsante fisico esp
        {espoff = true;}
        
        canMsgSnd.can_id = 0x217;
        canMsgSnd.can_dlc = 8;
        CAN0.sendMessage( & canMsgSnd);     
      }

// -------------------------------------------------------------------------------

 //       else if (id == 745 && len == 4) { // Gestisce indicatori personalizzati e temi
 //          
 //       canMsgSnd.data[0] = canMsgRcv.data[0];
 //       canMsgSnd.data[1] = canMsgRcv.data[1];
 //       canMsgSnd.data[2] = canMsgRcv.data[2];
 //       canMsgSnd.data[3] = canMsgRcv.data[3];

 //       bitSet(canMsgSnd.data[1], 6);   // Imposta tema rosso
        
 //       canMsgSnd.can_id = 0x2E9;
 //      canMsgSnd.can_dlc = 4;
 //       CAN1.sendMessage( & canMsgSnd);     
 //     }
                
// -------------------------------------------------------------------------------

        else if (id == 0x1E9 && len >= 2) { // Telematic suggested speed to fake CVM frame
        CAN0.sendMessage( & canMsgRcv);

        tmpVal = (canMsgRcv.data[3] >> 2); // POI type - Gen2 (6b)

        canMsgSnd.data[0] = canMsgRcv.data[1];
        canMsgSnd.data[1] = ((tmpVal > 0 && vehicleSpeed > canMsgRcv.data[0]) ? 0x30 : 0x10); // POI Over-speed, make speed limit blink
        canMsgSnd.data[2] = 0x00;
        canMsgSnd.data[3] = 0x00;
        canMsgSnd.data[4] = 0x7C;
        canMsgSnd.data[5] = 0xF8;
        canMsgSnd.data[6] = 0x00;
        canMsgSnd.data[7] = 0x00;
        canMsgSnd.can_id = 0x268; // CVM Frame ID
        canMsgSnd.can_dlc = 8;
        CAN1.sendMessage( & canMsgSnd);
      }

// --------------------------------------------------------------------------------      
      
      else if (id == 485 && len == 7) {
        // Ambience mapping
        tmpVal = canMsgRcv.data[5];
        if (tmpVal == 0x00) { // User
          canMsgRcv.data[6] = 0x40;
        } else if (tmpVal == 0x08) { // Classical
          canMsgRcv.data[6] = 0x44;
        } else if (tmpVal == 0x10) { // Jazz
          canMsgRcv.data[6] = 0x48;
        } else if (tmpVal == 0x18) { // Pop-Rock
          canMsgRcv.data[6] = 0x4C;
        } else if (tmpVal == 0x28) { // Techno
          canMsgRcv.data[6] = 0x54;
        } else if (tmpVal == 0x20) { // Vocal
          canMsgRcv.data[6] = 0x50;
        } else { // Default : User
          canMsgRcv.data[6] = 0x40;
        }

        // Loudness / Volume linked to speed
        tmpVal = canMsgRcv.data[4];
        if (tmpVal == 0x10) { // Loudness / not linked to speed
          canMsgRcv.data[5] = 0x40;
        } else if (tmpVal == 0x14) { // Loudness / Volume linked to speed
          canMsgRcv.data[5] = 0x47;
        } else if (tmpVal == 0x04) { // No Loudness / Volume linked to speed
          canMsgRcv.data[5] = 0x07;
        } else if (tmpVal == 0x00) { // No Loudness / not linked to speed
          canMsgRcv.data[5] = 0x00;
        } else { // Default : No Loudness / not linked to speed
          canMsgRcv.data[5] = 0x00;
        }

        // Bass
        // CAN2004 Telematic Range: (-9) "54" > (-7) "57" > ... > "72" (+9) ("63" = 0)
        // CAN2010 Telematic Range: "32" > "88" ("60" = 0)
        tmpVal = canMsgRcv.data[2];
        canMsgRcv.data[2] = ((tmpVal - 32) / 4) + 57; // Converted value

        // Treble
        // CAN2004 Telematic Range: (-9) "54" > (-7) "57" > ... > "72" (+9) ("63" = 0)
        // CAN2010 Telematic Range: "32" > "88" ("60" = 0)
        tmpVal = canMsgRcv.data[3];
        canMsgRcv.data[4] = ((tmpVal - 32) / 4) + 57; // Converted value on position 4 (while it's on 3 on a old amplifier)

        // Balance - Left / Right
        // CAN2004 Telematic Range: (-9) "54" > (-7) "57" > ... > "72" (+9) ("63" = 0)
        // CAN2010 Telematic Range: "32" > "88" ("60" = 0)
        tmpVal = canMsgRcv.data[1];
        canMsgRcv.data[1] = ((tmpVal - 32) / 4) + 57; // Converted value

        // Balance - Front / Back
        // CAN2004 Telematic Range: (-9) "54" > (-7) "57" > ... > "72" (+9) ("63" = 0)
        // CAN2010 Telematic Range: "32" > "88" ("60" = 0)
        tmpVal = canMsgRcv.data[0];
        canMsgRcv.data[0] = ((tmpVal - 32) / 4) + 57; // Converted value

        // Mediums ?
        canMsgRcv.data[3] = 63; // 0x3F = 63

        CAN0.sendMessage( & canMsgRcv);
      } else {
        CAN0.sendMessage( & canMsgRcv);
      }
    } else {
      CAN0.sendMessage( & canMsgRcv);
    }
  }
}
void myISR() {
    button1Pressed = true;
}
